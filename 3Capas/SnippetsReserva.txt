{
	"ClienteController with Placeholder Entity Name": {
			"prefix": "Controller",
			"body": [
				"using System;",
				"using System.Collections.Generic;",
				"using System.Linq;",
				"using System.Threading.Tasks;",
				"using API.Dtos;",
				"using AutoMapper;",
				"using Core.Entities;",
				"using Core.Interfaces;",
				"using Microsoft.AspNetCore.Mvc;",
				"",
				"namespace API.Controllers;",
				"public class ${1:Entidad}Controller: BaseControllerApi",
				"    {",
				"        private readonly IUnitOfWork _unitOfWork;",
				"        private readonly IMapper _mapper;",
				"",
				"        public ${1:Entidad}Controller(IUnitOfWork unitOfWork, IMapper mapper)",
				"        {",
				"            _unitOfWork = unitOfWork;",
				"            _mapper = mapper;",
				"        }",
				"",
				"        [HttpGet]",
				"        [ProducesResponseType(StatusCodes.Status200OK)]",
				"        [ProducesResponseType(StatusCodes.Status400BadRequest)]",
				"        public async Task<ActionResult<IEnumerable<${1}>>> Get()",
				"        {",
				"            var entidades = await _unitOfWork.${1}.GetAllAsync();",
				"            return _mapper.Map<List<${1}>>(entidades);",
				"        }",
				"",
				"        [HttpGet(\"{id}\")]",
				"        [ProducesResponseType(StatusCodes.Status200OK)]",
				"        [ProducesResponseType(StatusCodes.Status400BadRequest)]",
				"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
				"        public async Task<ActionResult<${1}Dto>> Get(int id)",
				"        {",
				"            var entidad = await _unitOfWork.${1}.GetByIdAsync(id);",
				"            if(entidad == null)",
				"            {",
				"                return NotFound();",
				"            }",
				"            return _mapper.Map<${1}Dto>(entidad);",
				"        }",
				"",
				"        [HttpPost]",
				"        [ProducesResponseType(StatusCodes.Status200OK)]",
				"        [ProducesResponseType(StatusCodes.Status400BadRequest)]",
				"        public async Task<ActionResult<${1}>> Post(${1}Dto ${1}Dto)",
				"        {",
				"            var entidad = _mapper.Map<${1}>(${1}Dto);",
				"            this._unitOfWork.${1}.Add(entidad);",
				"            await _unitOfWork.SaveAsync();",
				"            if(entidad == null)",
				"            {",
				"                return BadRequest();",
				"            }",
				"            ${1}Dto.Id = entidad.Id;",
				"            return CreatedAtAction(nameof(Post), new {id = ${1}Dto.Id}, ${1}Dto);",
				"        }",
				"",
				"        [HttpPut(\"{id}\")]",
				"        [ProducesResponseType(StatusCodes.Status200OK)]",
				"        [ProducesResponseType(StatusCodes.Status400BadRequest)]",
				"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
				"        public async Task<ActionResult<${1}Dto>> Put(int id, [FromBody] ${1}Dto ${1}Dto)",
				"        {",
				"            if(${1}Dto == null)",
				"            {",
				"                return NotFound();",
				"            }",
				"            var entidades = _mapper.Map<${1}>(${1}Dto);",
				"            _unitOfWork.${1}.Update(entidades);",
				"            await _unitOfWork.SaveAsync();",
				"            return ${1}Dto;",
				"        }",
				"",
				"        [HttpDelete(\"{id}\")]",
				"        [ProducesResponseType(StatusCodes.Status204NoContent)]",
				"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
				"        public async Task<IActionResult> Delete(int id)",
				"        {",
				"            var entidad = await _unitOfWork.${1}.GetByIdAsync(id);",
				"            if(entidad == null)",
				"            {",
				"                return NotFound();",
				"            }",
				"            _unitOfWork.${1}.Delete(entidad);",
				"            await _unitOfWork.SaveAsync();",
				"            return NoContent();",
				"        }",
				"    }"
			],
			"description": "Creates a ClienteController with Placeholder Entity Name"
		},
		"MappingProfiles.cs": {
			"prefix": "mappingprofiles",
			"body": [
				"using System;",
				"using System.Collections.Generic;",
				"using System.Linq;",
				"using System.Threading.Tasks;",
				"using API.Dtos;",
				"using AutoMapper;",
				"using Core.Entities;",
				"",
				"namespace API.Profiles",
				"{",
				"    public class MappingProfiles : Profile",
				"    {",
				"        public MappingProfiles()",
				"        {",
				"            CreateMap<Entidad, EntidadDto>();",
				"        }",
				"    }",
				"}"
			],
			"description": "Creates a MappingProfiles.cs file"
		},
		"Program.cs": {
			"prefix": "program",
			"body": [
				"using System.Reflection;",
				"using API.Extension;",
				"using AspNetCoreRateLimit;",
				"using Infrastructure.Data;",
				"using Microsoft.EntityFrameworkCore;",
				"",
				"var builder = WebApplication.CreateBuilder(args);",
				"",
				"builder.Services.AddControllers();",
				"builder.Services.ConfigureRateLimiting();",
				"builder.Services.AddAutoMapper(Assembly.GetEntryAssembly());",
				"builder.Services.ConfigureCors();",
				"builder.Services.AddAplicationServices();",
				"builder.Services.AddEndpointsApiExplorer();",
				"builder.Services.AddSwaggerGen();",
				"",
				"builder.Services.AddDbContext<ArchivoDeContexto>(options =>",
				"{",
				"    string connectionString = builder.Configuration.GetConnectionString(\"MySqlConex\");",
				"    options.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString));",
				"});",
				"",
				"var app = builder.Build();",
				"",
				"if (app.Environment.IsDevelopment())",
				"{",
				"    app.UseSwagger();",
				"    app.UseSwaggerUI();",
				"}",
				"app.UseCors(\"CorsPolicy\");",
				"app.UseHttpsRedirection();",
				"app.UseIpRateLimiting();",
				"app.UseAuthorization();",
				"app.MapControllers();",
				"",
				"app.Run();"
			],
			"description": "Creates a Program.cs file"
		},
		"Create IUnitOfWork Interface": {
			"prefix": "Iunitofwork",
			"body": [
				"using System;",
				"using System.Collections.Generic;",
				"using System.Linq;",
				"using System.Threading.Tasks;",
				"",
				"namespace Core.Interfaces",
				"{",
				"    public interface IUnitOfWork",
				"    {",
				"        IEntidad (EntidadEnPlural) { get; }",
				"        Task<int> SaveAsync();",
				"    }",
			"}"
			],
			"description": "Creates IUnitOfWork Interface"
		},
		"Create an Application Service Extension": {
			"prefix": "applicationserviceextension",
			"body": [
				"using System;",
				"using System.Collections.Generic;",
				"using System.Linq;",
				"using System.Threading.Tasks;",
				"using AspNetCoreRateLimit;",
				"using Core.Interfaces;",
				"using Infrastructure.UnitOfWork;",
				"",
				"namespace API.Extension",
				"{",
				"    public static class ApplicationServiceExtensions",
				"    {",
				"        public static void ConfigureCors(this IServiceCollection services)=>",
				"        services.AddCors(options =>",
				"        {",
				"            options.AddPolicy(\"CorsPolicy\", builder =>",
				"            {",
				"                builder.AllowAnyHeader() //WithOrigins(\"https://localhost:4200\")",
				"                .AllowAnyMethod()   //WithMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\")",
				"                .WithOrigins(\"https://localhost:4200\"); //WithHeaders(\"accept\", \"content-type\", \"origin\", \"x-custom-header\");",
				"            });",
				"        });",
				"        public static void ConfigureRateLimiting(this IServiceCollection services)",
				"        {",
				"            services.AddMemoryCache();",
				"            services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();",
				"            services.AddInMemoryRateLimiting();",
				"            services.Configure<IpRateLimitOptions>(options =>",
				"            {",
				"                options.GeneralRules = new List<RateLimitRule>",
				"                {",
				"                    new RateLimitRule",
				"                    {",
				"                        Endpoint = \"*\",",
				"                        Limit = 5,",
				"                        Period = \"10s\"",
				"                    },",
				"                };",
				"            });",
				"        }",
				"        public static void AddAplicationServices(this IServiceCollection services)",
				"        {",
				"            services.AddScoped<IUnitOfWork,UnitOfWork>();",
				"        }",
				"    }",
				"}"
			],
			"description": "Creates an Application Service Extension"
		},
			"AppNotiContext": {
				"prefix": "Context",
				"body": [
					"using System;",
					"using System.Collections.Generic;",
					"using System.Linq;",
					"using System.Reflection;",
					"using System.Threading.Tasks;",
					"using Core.Entities;",
					"using Microsoft.EntityFrameworkCore;",
					"",
					"namespace Infrastructure.Data",
					"{",
					"    public class (NombreProjecto)Context : DbContext",
					"    {",
					"        public (NombreProjecto)Context(DbContextOptions options) : base(options) { }",
					"",
					"        public DbSet<EntityName> (EntidadPlural) { get; set; }",
					"",
					"        protected override void OnModelCreating(ModelBuilder modelBuilder)",
					"        {",
					"            base.OnModelCreating(modelBuilder);",
					"            modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());",
					"        }",
					"    }",
					"}"
				],
				"description": "Generates a generic implementation of DbContext for the application."
			},
			"UnitOfWork Class": {
				"prefix": "UnitOfWork",
				"body": [
					"using System;",
					"using Core.Interfaces;",
					"using Infrastructure.Data;",
					"using Infrastructure.Repository;",
					"",
					"namespace Infrastructure.UnitOfWork;",
					"public class UnitOfWork : IUnitOfWork, IDisposable",
					"{",
					"    private readonly ArchivoContexto _context;",
					"    private IEntidadRepository //_nombreentidadtidad;",
					"",
					"    public UnitOfWork(ArchivoContexto context)",
					"    {",
					"        _context = context;",
					"    }",
					"",
					"    public //IEntidadRepository NombreEntidad {",
					"        get {",
					"            if (//_nombreentidad == null) {",
					"                //_nombreentidad = new EntidadRepository(_context);",
					"            }",
					"            return //_nombreentidad;",
					"        }",
					"    }",
					"",
					"    public void Dispose()",
					"    {",
					"        _context.Dispose();",
					"    }",
					"",
					"    public async Task<int> SaveAsync()",
					"    {",
					"        return await _context.SaveChangesAsync();",
					"    }",
					"}"
				],
				"description": "Snippet for implementing the Unit of Work pattern with a generic Entity Repository."
			},
			"Generic Repository Class": {
				"prefix": "Repository",
				"body": [
					"using System;",
					"using System.Collections.Generic;",
					"using System.Linq;",
					"using System.Threading.Tasks;",
					"using Core.Entities;",
					"using Core.Interfaces;",
					"using Infrastructure.Data;",
					"using Infrastructure.Repository;",
					"",
					"namespace Infrastructure.Repository;",
					"public class ${1:RepositoryName}Repository : GenericRepository<${1:Entity}> , I${1:RepositoryName}Repository",
					"    {",
					"        private readonly ArchivoContexto _context;",
					"        public ${1:RepositoryName}Repository(ArchivoContexto context) : base(context)",
					"        {",
					"            _context = context;",
					"        }",
					"    }"
				],
				"description": "Snippet for implementing a generic repository class."
			},
			"IGenericRepository": {
				"prefix": "IGenericRepository",
				"body": [
					"using System;",
					"using System.Collections.Generic;",
					"using System.Linq;",
					"using System.Threading.Tasks;",
					"using Core.Entities;",
					"",
					"namespace Core.Interfaces",
					"{",
					"\tpublic interface IGenericRepository<T> where T : BaseEntity",
					"\t{",
					"\t\tTask<T> GetByIdAsync(int id);",
					"\t\tTask<IEnumerable<T>> GetAllAsync();",
					"\t\tTask<(int totalRegistros, IEnumerable<T> registros)> GetAllAsync(int pageindex, int pageSize);",
					"\t\tIEnumerable<T> Find(Func<T, bool> predicate);",
					"\t\tvoid Add(T entity);",
					"\t\tvoid AddRange(IEnumerable<T> entities);",
					"\t\tvoid Update(T entity);",
					"\t\tvoid Delete(T entity);",
					"\t\tvoid DeleteRange(IEnumerable<T> entities);",
					"\t}",
					"}"
				],
				"description": "Snippet for the IGenericRepository interface."
			},
			"GenericRepository": {
				"prefix": "GenericRepository",
				"body": [
					"using System;",
					"using System.Collections.Generic;",
					"using System.Linq;",
					"using System.Threading.Tasks;",
					"using Core.Entities;",
					"using Core.Interfaces;",
					"using Infrastructure.Data;",
					"using Microsoft.EntityFrameworkCore;",
					"",
					"namespace Infrastructure.Repository",
					"{",
					"    public class GenericRepository<T> : IGenericRepository<T> where T : BaseEntity",
					"    {",
					"        private readonly ArchivoDeContexto _context;",
					"        public GenericRepository(ArchivoDeContexto context)",
					"        {",
					"            _context = context;",
					"        }",
					"",
					"        public virtual void Add(T entity)",
					"        {",
					"            _context.Set<T>().Add(entity);",
					"        }",
					"",
					"        public virtual void AddRange(IEnumerable<T> entities)",
					"        {",
					"            _context.Set<T>().AddRange(entities);",
					"        }",
					"",
					"        public virtual void Delete(T entity)",
					"        {",
					"            _context.Set<T>().Remove(entity);",
					"        }",
					"",
					"        public virtual void DeleteRange(IEnumerable<T> entities)",
					"        {",
					"            _context.Set<T>().RemoveRange(entities);",
					"        }",
					"",
					"        public virtual IEnumerable<T> Find(Func<T, bool> predicate)",
					"        {",
					"            return _context.Set<T>().Where(predicate);",
					"        }",
					"",
					"        public virtual async Task<IEnumerable<T>> GetAllAsync()",
					"        {",
					"            return await _context.Set<T>().ToListAsync();",
					"        }",
					"        public virtual async Task<(int totalRegistros, IEnumerable<T> registros)> GetAllAsync(int pageIndex, int pageSize)",
					"        {",
					"            var totalRegistros = await _context.Set<T>().CountAsync();",
					"            var registros = await _context.Set<T>()",
					"            .Skip((pageIndex - 1) * pageSize)",
					"            .Take(pageSize)",
					"            .ToListAsync();",
					"            return (totalRegistros, registros);",
					"        }",
					"",
					"        public virtual async Task<T> GetByIdAsync(int id)",
					"        {",
					"            return await _context.Set<T>().FindAsync(id);",
					"        }",
					"",
					"        public void Update(T entity)",
					"        {",
					"            _context.Set<T>().Update(entity);",
					"        }",
					"    }",
					"}"
				],
				"description": "Snippet for the GenericRepository class."
			},
				"BaseEntity": {
					"prefix": "BaseEntity",
					"body": [
						"using System;",
						"using System.Collections.Generic;",
						"using System.Linq;",
						"using System.Threading.Tasks;",
						"",
						"namespace Core.Entities",
						"{",
						"    public class BaseEntity",
						"    {",
						"        public int Id { get; set; }",
						"    }",
						"}"
					],
					"description": "Snippet for the BaseEntity class."
				},
				"ICiudadRepository": {
					"prefix": "Interface",
					"body": [
						"using System;",
						"using System.Collections.Generic;",
						"using System.Linq;",
						"using System.Threading.Tasks;",
						"using Core.Entities;",
						"",
						"namespace Core.Interfaces",
						"{",
						"    public interface I(Entidad)Repository : IGenericRepository<(Entidad)>",
						"    {",
						"        ",
						"    }",
						"}"
					],
					"description": "Snippet for the IEntidadRepository interface."
				},
				
					"(Entidad)Dto": {
						"prefix": "Dto",
						"body": [
							"using System;",
							"using System.Collections.Generic;",
							"using System.Linq;",
							"using System.Threading.Tasks;",
							"",
							"namespace API.Dtos",
							"{",
							"    public class ${1:(Entidad)}Dto",
							"    {",
							"        //public int Id { get; set; }",
							"        //Todos los atributos incluyendo el baseEntity y llaves foraneas",
							"    }",
							"}"
						],
						"description": "Snippet for Dto class."
				},
					"BaseControllerApi": {
						"prefix": "BaseControllerApi",
						"body": [
							"using System;",
							"using System.Collections.Generic;",
							"using System.Linq;",
							"using System.Threading.Tasks;",
							"using Microsoft.AspNetCore.Mvc;",
							"",
							"[ApiController]",
							"[Route(\"[controller]\")]",
							"public class BaseControllerApi : ControllerBase",
							"{",
							"",
							"}"
						],
						"description": "Snippet for BaseControllerApi class."
					},
					"appsettings.json": {
						"prefix": "appsettings",
						"body": [
							"{",
							"  \"Logging\": {",
							"    \"LogLevel\": {",
							"      \"Default\": \"Information\",",
							"      \"Microsoft.AspNetCore\": \"Warning\"",
							"    }",
							"  },",
							"  \"AllowedHosts\": \"*\",",
							"  \"ConnectionStrings\": {",
							"    \"MySqlConex\": \"server=localhost;user=root;password=123456;database=d;\"",
							"  }",
							"}",
						],
						"description": "Snippet for appsettings.json file."
					},
					"appsettings.Development.json": {
						"prefix": "appsettings.Development",
						"body": [
							"{",
							"  \"Logging\": {",
							"    \"LogLevel\": {",
							"      \"Default\": \"Information\",",
							"      \"Microsoft.AspNetCore\": \"Warning\"",
							"    }",
							"  },",
							"  \"ConnectionStrings\": {",
							"    \"MySqlConex\": \"server=localhost;user=root;password=123456;database=d;\"",
							"  }",
							"}",
						],
						"description": "Snippet for appsettings.json file."
					},
						"dotnet ef migracion": {
						"prefix": "dotnet ef migracion",
						"body": [
								"dotnet ef migrations add InitialCreate --project ./Infrastructure/ --startup-project ./API/ --output-dir ./Data/Migrations",
								"dotnet ef database update --project ./Infrastructure/ --startup-project ./API/"
						],
						"description": "Snippet for executing entity framework migration commands."
						}
}